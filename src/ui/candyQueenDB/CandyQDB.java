/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.candyQueenDB;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.mindrot.jbcrypt.BCrypt;

/**
 *
 * @author Dayne Gonsalves
 */


public class CandyQDB extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public CandyQDB() {
        initComponents();
        Timer time = new Timer(1000, new TimeListener());
        time.start();
        
    }
    class TimeListener implements ActionListener{
        private int hour;
        private int minute;
        private int second;
        private int year;
        private int month;
        private int day;
        private String fmtHour;
        private String fmtMinute;
        private String fmtSecond;
        private String fmtYear;
        private String fmtMonth;
        private String fmtDay;
        private String hr;
        private String min;
        private String sec;
        private String YYYY;
        private String MM;
        private String DD;
        
        @Override
        public void actionPerformed(ActionEvent e){
            Calendar timeNow = Calendar.getInstance();
            hour = timeNow.get(Calendar.HOUR_OF_DAY);
            minute = timeNow.get(Calendar.MINUTE);
            second = timeNow.get(Calendar.SECOND);
            year = timeNow.get(Calendar.YEAR);
            month = timeNow.get(Calendar.MONTH);
            day = timeNow.get(Calendar.DAY_OF_MONTH);
            formatDate();
            hr = getFormattedHours();
            min = getFormattedMinutes();
            sec = getFormattedSeconds();
            YYYY = getFormattedYear();
            MM = getFormattedMonth();
            DD = getFormattedDay();
            getDateTime.setText(" "+YYYY+"/"+MM+"/"+DD+" - "+hr+":"+min+":"+sec);
        }
        
        public void formatDate(){
            fmtHour = String.format("%02d", hour);
            fmtMinute = String.format("%02d", minute);
            fmtSecond = String.format("%02d", second);
            fmtYear = String.format("%04d", year);
            fmtMonth = String.format("%02d", month);
            fmtDay = String.format("%02d", day);
        }
        
        public String getFormattedHours(){
            return fmtHour;
        }
        
        public String getFormattedMinutes(){
            return fmtMinute;
        }
        
        public String getFormattedSeconds(){
            return fmtSecond;
        }
        
        public String getFormattedYear(){
            return fmtYear;
        }
        
        public String getFormattedMonth(){
            return fmtMonth;
        }
        
        public String getFormattedDay(){
            return fmtDay;
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane5 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jSeparator1 = new javax.swing.JSeparator();
        jSlider1 = new javax.swing.JSlider();
        jTextField8 = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        getStatus = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jLabel4 = new javax.swing.JLabel();
        reOrder = new javax.swing.JLabel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jLabel3 = new javax.swing.JLabel();
        dbItemCount = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        getDateTime = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        NewCasePurchase = new javax.swing.JTabbedPane();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        getUsername = new javax.swing.JTextField();
        DBLogin = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        statPanel = new javax.swing.JTextArea();
        getPassword = new javax.swing.JPasswordField();
        statPanelStatus = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        DBLogout = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        wholesaleSuppliers = new javax.swing.JTextPane();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        wholesaleStocks = new javax.swing.JTextPane();
        jLabel8 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        Ncp = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        wsCartSubmitPurchase = new javax.swing.JButton();
        wsCsClearObjects1 = new javax.swing.JButton();
        wsPurchaseCartMarkup = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        wsPurchaseCartBarcode = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        wsPurchaseCartCartBought = new javax.swing.JTextField();
        wsPurchaseCartItemName = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        wsPurchaseCartTotalCost = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        wsPurchaseCartSupplier = new javax.swing.JTextField();
        wsPurchaseCartCtnPerCs = new javax.swing.JTextField();
        newCsP = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        wsCsClearObjects = new javax.swing.JButton();
        wsPurchaseCsItemName = new javax.swing.JTextField();
        wsPurchaseCsCasesBought = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        wsCsSubmitPurchase = new javax.swing.JButton();
        wsPurchaseCsMarkup = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        wsPurchaseCsBarcode = new javax.swing.JTextField();
        wsPurchaseCsSupplier = new javax.swing.JTextField();
        wsPurchaseCsTotalCost = new javax.swing.JTextField();
        wsPurchaseCsCtnPerCs = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        itemNameBox = new javax.swing.JComboBox<>();
        wholesaleExistingPurchaseSubmit = new javax.swing.JButton();
        wholesaleExistingCtnPurchased = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        itemNameBoxSl = new javax.swing.JComboBox<>();
        wholesaleSaleSubmit = new javax.swing.JButton();
        wholesaleSaleCtnSold = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        wsExpense = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        wsExpenseDocument = new javax.swing.JTextArea();
        jLabel37 = new javax.swing.JLabel();
        wsExpenseTotal = new javax.swing.JTextField();
        wsExpenseSubmit = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        accNum = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        fName = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        lName = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        addr = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        eMail = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        phoneOne = new javax.swing.JTextField();
        phoneTwo = new javax.swing.JTextField();
        outstnd = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel26 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        customerContactInfo = new javax.swing.JTextPane();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jPanel28 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        customerLocation = new javax.swing.JTextPane();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jPanel27 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        customerOutstanding = new javax.swing.JTextPane();
        jLabel50 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logbox = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenu3.setText("jMenu3");

        jMenu2.setText("jMenu2");

        jScrollPane5.setViewportView(jEditorPane1);

        jTextField8.setText("7329999");
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(255, 255, 255));
        jLabel46.setText("E-mail:");

        jLabel53.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(255, 255, 255));
        jLabel53.setText("Tel # 1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(800, 600));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Vani", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Candy Queen Database");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Status");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));

        getStatus.setBackground(new java.awt.Color(204, 0, 0));
        getStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getStatus.setForeground(new java.awt.Color(255, 255, 255));
        getStatus.setText("OFFLINE");
        getStatus.setOpaque(true);

        jSplitPane1.setBackground(new java.awt.Color(0, 0, 0));
        jSplitPane1.setEnabled(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("0");
        jSplitPane1.setRightComponent(jLabel10);

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Customers In DB:");
        jSplitPane1.setLeftComponent(jLabel5);

        jSplitPane2.setBackground(new java.awt.Color(0, 0, 0));
        jSplitPane2.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Items to Reorder:");
        jSplitPane2.setLeftComponent(jLabel4);

        reOrder.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        reOrder.setForeground(new java.awt.Color(255, 255, 255));
        reOrder.setText("0");
        jSplitPane2.setRightComponent(reOrder);

        jSplitPane3.setBackground(new java.awt.Color(0, 0, 0));
        jSplitPane3.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Items in DB");
        jSplitPane3.setLeftComponent(jLabel3);

        dbItemCount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dbItemCount.setForeground(new java.awt.Color(255, 255, 255));
        dbItemCount.setText("0");
        jSplitPane3.setRightComponent(dbItemCount);

        getDateTime.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        getDateTime.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        getDateTime.setEnabled(false);
        getDateTime.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                getDateTimeMouseMoved(evt);
            }
        });
        getDateTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                getDateTimeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                getDateTimeFocusLost(evt);
            }
        });
        getDateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDateTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getStatus)
                .addGap(35, 35, 35)
                .addComponent(jSplitPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(106, 106, 106))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(getDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSplitPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(getStatus)
                                .addComponent(jLabel2))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(getDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel38)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setForeground(new java.awt.Color(51, 51, 51));

        jTabbedPane1.setBackground(new java.awt.Color(102, 102, 102));

        jPanel17.setBackground(new java.awt.Color(51, 51, 51));

        jPanel21.setBackground(new java.awt.Color(102, 102, 255));
        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Username");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Password");

        getUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUsernameActionPerformed(evt);
            }
        });

        DBLogin.setText("Login");
        DBLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBLoginActionPerformed(evt);
            }
        });

        jPanel25.setBackground(new java.awt.Color(0, 0, 0));
        jPanel25.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        statPanel.setEditable(false);
        statPanel.setColumns(20);
        statPanel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        statPanel.setRows(5);
        statPanel.setCaretColor(new java.awt.Color(51, 51, 51));
        statPanel.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        statPanel.setEnabled(false);
        jScrollPane4.setViewportView(statPanel);

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );

        getPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPasswordActionPerformed(evt);
            }
        });

        statPanelStatus.setBackground(new java.awt.Color(204, 0, 0));
        statPanelStatus.setForeground(new java.awt.Color(255, 255, 255));
        statPanelStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statPanelStatus.setText("OFFLINE");
        statPanelStatus.setOpaque(true);

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setText("Statistics");

        DBLogout.setText("Logout");
        DBLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(getUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(statPanelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DBLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DBLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))))
                .addGap(10, 10, 10)
                .addComponent(jPanel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(jPanel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(getPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DBLogin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DBLogout)
                        .addGap(24, 24, 24)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statPanelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39))
                        .addGap(28, 28, 28))))
        );

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        NewCasePurchase.addTab("Statistics", jPanel16);

        jPanel15.setBackground(new java.awt.Color(51, 51, 51));

        wholesaleSuppliers.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        wholesaleSuppliers.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        wholesaleSuppliers.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        wholesaleSuppliers.setDoubleBuffered(true);
        wholesaleSuppliers.setEnabled(false);
        wholesaleSuppliers.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                wholesaleSuppliersCaretUpdate(evt);
            }
        });
        wholesaleSuppliers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                wholesaleSuppliersFocusGained(evt);
            }
        });
        wholesaleSuppliers.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                wholesaleSuppliersComponentShown(evt);
            }
        });
        jScrollPane3.setViewportView(wholesaleSuppliers);

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Item Name");

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Barcode");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Supplier");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("Cost");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(148, 148, 148)
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addContainerGap())
        );

        NewCasePurchase.addTab("Suppliers", jPanel15);

        jPanel11.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel11FocusGained(evt);
            }
        });

        jPanel12.setBackground(new java.awt.Color(51, 51, 51));

        wholesaleStocks.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        wholesaleStocks.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        wholesaleStocks.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        wholesaleStocks.setDoubleBuffered(true);
        wholesaleStocks.setEnabled(false);
        wholesaleStocks.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                wholesaleStocksCaretUpdate(evt);
            }
        });
        wholesaleStocks.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                wholesaleStocksFocusGained(evt);
            }
        });
        wholesaleStocks.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                wholesaleStocksComponentShown(evt);
            }
        });
        jScrollPane2.setViewportView(wholesaleStocks);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Item Name");

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Barcode");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Quantity");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(146, 146, 146)
                .addComponent(jLabel25)
                .addGap(221, 221, 221)
                .addComponent(jLabel26)
                .addGap(214, 214, 214))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        NewCasePurchase.addTab("Inventory", jPanel11);

        Ncp.setBackground(new java.awt.Color(51, 51, 51));

        jPanel22.setBackground(new java.awt.Color(102, 102, 255));
        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        wsCartSubmitPurchase.setText("Submit");
        wsCartSubmitPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsCartSubmitPurchaseActionPerformed(evt);
            }
        });

        wsCsClearObjects1.setText("Clear Data");
        wsCsClearObjects1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsCsClearObjects1ActionPerformed(evt);
            }
        });

        wsPurchaseCartMarkup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCartMarkupActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel24.setText("Markup:");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel23.setText("Ctn Per Cs:");

        wsPurchaseCartBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCartBarcodeActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("Barcode:");

        wsPurchaseCartCartBought.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCartCartBoughtActionPerformed(evt);
            }
        });

        wsPurchaseCartItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCartItemNameActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel22.setText("Ctn Bought:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setText("Item Name:");

        wsPurchaseCartTotalCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCartTotalCostActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel21.setText("Total Cost:");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel20.setText("Supplier:");

        wsPurchaseCartSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCartSupplierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wsPurchaseCartBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel19))
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wsPurchaseCartMarkup, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wsPurchaseCartCtnPerCs, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(wsCartSubmitPurchase, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(jLabel22)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wsCsClearObjects1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wsPurchaseCartItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wsPurchaseCartCartBought, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wsPurchaseCartSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel22Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel21)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wsPurchaseCartTotalCost, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(wsPurchaseCartBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(wsPurchaseCartItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(wsPurchaseCartSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(wsPurchaseCartCartBought, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(wsPurchaseCartTotalCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(wsPurchaseCartCtnPerCs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(wsPurchaseCartMarkup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wsCartSubmitPurchase)
                    .addComponent(wsCsClearObjects1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout NcpLayout = new javax.swing.GroupLayout(Ncp);
        Ncp.setLayout(NcpLayout);
        NcpLayout.setHorizontalGroup(
            NcpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NcpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        NcpLayout.setVerticalGroup(
            NcpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NcpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        NewCasePurchase.addTab("New Cart Purchase", Ncp);

        newCsP.setBackground(new java.awt.Color(51, 51, 51));

        jPanel20.setBackground(new java.awt.Color(102, 102, 255));
        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel20.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jPanel20AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setText("Supplier:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setText("Total Cost:");

        wsCsClearObjects.setText("Clear Data");
        wsCsClearObjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsCsClearObjectsActionPerformed(evt);
            }
        });

        wsPurchaseCsItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCsItemNameActionPerformed(evt);
            }
        });

        wsPurchaseCsCasesBought.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCsCasesBoughtActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Item Name:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setText("Cases Bought:");

        wsCsSubmitPurchase.setText("Submit");
        wsCsSubmitPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsCsSubmitPurchaseActionPerformed(evt);
            }
        });

        wsPurchaseCsMarkup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCsMarkupActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setText("Markup:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setText("Ctn Per Cs:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Barcode:");

        wsPurchaseCsBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCsBarcodeActionPerformed(evt);
            }
        });

        wsPurchaseCsSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCsSupplierActionPerformed(evt);
            }
        });

        wsPurchaseCsTotalCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCsTotalCostActionPerformed(evt);
            }
        });

        wsPurchaseCsCtnPerCs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsPurchaseCsCtnPerCsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel20Layout.createSequentialGroup()
                                .addComponent(wsPurchaseCsBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(jLabel12))
                            .addComponent(wsCsSubmitPurchase, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel20Layout.createSequentialGroup()
                                .addComponent(wsPurchaseCsCtnPerCs, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel20Layout.createSequentialGroup()
                                .addComponent(wsCsClearObjects, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel20Layout.createSequentialGroup()
                                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel20Layout.createSequentialGroup()
                                        .addComponent(wsPurchaseCsItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(34, 34, 34)
                                        .addComponent(jLabel13))
                                    .addGroup(jPanel20Layout.createSequentialGroup()
                                        .addComponent(wsPurchaseCsCasesBought, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(21, 21, 21)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(wsPurchaseCsSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(wsPurchaseCsTotalCost, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addComponent(wsPurchaseCsMarkup, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wsPurchaseCsBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wsPurchaseCsItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(jLabel12)
                        .addComponent(jLabel13)
                        .addComponent(wsPurchaseCsSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(wsPurchaseCsCasesBought, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)
                        .addComponent(wsPurchaseCsTotalCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(wsPurchaseCsCtnPerCs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wsPurchaseCsMarkup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(32, 32, 32)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wsCsSubmitPurchase)
                    .addComponent(wsCsClearObjects))
                .addGap(56, 56, 56))
        );

        javax.swing.GroupLayout newCsPLayout = new javax.swing.GroupLayout(newCsP);
        newCsP.setLayout(newCsPLayout);
        newCsPLayout.setHorizontalGroup(
            newCsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCsPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        newCsPLayout.setVerticalGroup(
            newCsPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCsPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        NewCasePurchase.addTab("New Case Purchase", newCsP);

        jPanel13.setBackground(new java.awt.Color(51, 51, 51));

        jPanel14.setBackground(new java.awt.Color(102, 102, 255));
        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel31.setBackground(new java.awt.Color(102, 102, 102));
        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel31.setText("Item Name:");

        itemNameBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        itemNameBox.setToolTipText("");
        itemNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameBoxActionPerformed(evt);
            }
        });

        wholesaleExistingPurchaseSubmit.setText("Submit");
        wholesaleExistingPurchaseSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wholesaleExistingPurchaseSubmitActionPerformed(evt);
            }
        });

        wholesaleExistingCtnPurchased.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        wholesaleExistingCtnPurchased.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wholesaleExistingCtnPurchasedActionPerformed(evt);
            }
        });

        jLabel32.setBackground(new java.awt.Color(102, 102, 102));
        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel32.setText("Ctn Purchased:");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(wholesaleExistingCtnPurchased)
                    .addComponent(wholesaleExistingPurchaseSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(itemNameBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(444, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(itemNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wholesaleExistingCtnPurchased, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wholesaleExistingPurchaseSubmit)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        NewCasePurchase.addTab("Existing Purchase", jPanel13);

        jPanel18.setBackground(new java.awt.Color(51, 51, 51));

        jPanel19.setBackground(new java.awt.Color(102, 102, 255));
        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel34.setBackground(new java.awt.Color(102, 102, 102));
        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel34.setText("Item Name:");

        itemNameBoxSl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        itemNameBoxSl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameBoxSlActionPerformed(evt);
            }
        });

        wholesaleSaleSubmit.setText("Submit");
        wholesaleSaleSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wholesaleSaleSubmitActionPerformed(evt);
            }
        });

        wholesaleSaleCtnSold.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        wholesaleSaleCtnSold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wholesaleSaleCtnSoldActionPerformed(evt);
            }
        });

        jLabel35.setBackground(new java.awt.Color(102, 102, 102));
        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel35.setText("Ctn Sold:");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel34)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(wholesaleSaleCtnSold)
                    .addComponent(wholesaleSaleSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(itemNameBoxSl, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(467, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(itemNameBoxSl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wholesaleSaleCtnSold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wholesaleSaleSubmit)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        NewCasePurchase.addTab("Sales", jPanel18);

        jPanel9.setBackground(new java.awt.Color(51, 51, 51));

        jPanel10.setBackground(new java.awt.Color(102, 102, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("Expense:");

        wsExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsExpenseActionPerformed(evt);
            }
        });

        jPanel23.setBackground(new java.awt.Color(0, 0, 0));
        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        wsExpenseDocument.setColumns(20);
        wsExpenseDocument.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        wsExpenseDocument.setRows(5);
        wsExpenseDocument.setText(">>> Connect to get expense history.\n");
        wsExpenseDocument.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        wsExpenseDocument.setEnabled(false);
        jScrollPane6.setViewportView(wsExpenseDocument);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
        );

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("Total:");

        wsExpenseSubmit.setText("Submit");
        wsExpenseSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsExpenseSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel37)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(wsExpenseSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(wsExpense, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(wsExpenseTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel33)
                            .addComponent(wsExpense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel37)
                            .addComponent(wsExpenseTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(wsExpenseSubmit)
                        .addGap(0, 102, Short.MAX_VALUE))
                    .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        NewCasePurchase.addTab("Expense", jPanel9);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(NewCasePurchase, javax.swing.GroupLayout.PREFERRED_SIZE, 771, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(NewCasePurchase)
        );

        jTabbedPane1.addTab("Wholesale Inventory", jPanel6);

        jPanel8.setBackground(new java.awt.Color(51, 51, 51));

        jPanel24.setBackground(new java.awt.Color(102, 102, 255));
        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Account:");

        accNum.setText("0000");

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText("First Name:");

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText("Last Name:");

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(255, 255, 255));
        jLabel42.setText("Address:");

        addr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addrActionPerformed(evt);
            }
        });

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        jLabel43.setText("Phone 1:");

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setText("Phone 2:");

        eMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eMailActionPerformed(evt);
            }
        });

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(255, 255, 255));
        jLabel45.setText("E-mail:");

        jLabel47.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(255, 255, 255));
        jLabel47.setText("Outstanding:");

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        phoneOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneOneActionPerformed(evt);
            }
        });

        jButton2.setText("Clear");

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel42)
                            .addComponent(jLabel36))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(accNum, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(addr)))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(eMail))))
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel43)
                            .addComponent(jLabel40))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel24Layout.createSequentialGroup()
                                .addComponent(fName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jLabel41))
                            .addGroup(jPanel24Layout.createSequentialGroup()
                                .addComponent(phoneOne, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel44)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phoneTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel47)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outstnd, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(accNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40)
                    .addComponent(fName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41)
                    .addComponent(lName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(addr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43)
                    .addComponent(phoneOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44)
                    .addComponent(phoneTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel45)
                    .addComponent(jLabel47)
                    .addComponent(outstnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Entry", jPanel8);

        jPanel26.setBackground(new java.awt.Color(51, 51, 51));

        customerContactInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        customerContactInfo.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        customerContactInfo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        customerContactInfo.setDoubleBuffered(true);
        customerContactInfo.setEnabled(false);
        customerContactInfo.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                customerContactInfoCaretUpdate(evt);
            }
        });
        customerContactInfo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerContactInfoFocusGained(evt);
            }
        });
        customerContactInfo.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                customerContactInfoComponentShown(evt);
            }
        });
        jScrollPane7.setViewportView(customerContactInfo);

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 255, 255));
        jLabel48.setText("Account");

        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(255, 255, 255));
        jLabel49.setText("Customer Name");

        jLabel52.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(255, 255, 255));
        jLabel52.setText("Tel # 1");

        jLabel54.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(255, 255, 255));
        jLabel54.setText("Tel # 2");

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(255, 255, 255));
        jLabel55.setText("E-Mail");

        javax.swing.GroupLayout jPanel26Layout = new javax.swing.GroupLayout(jPanel26);
        jPanel26.setLayout(jPanel26Layout);
        jPanel26Layout.setHorizontalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel26Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addComponent(jScrollPane7)
                        .addContainerGap())
                    .addGroup(jPanel26Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel48)
                        .addGap(55, 55, 55)
                        .addComponent(jLabel49)
                        .addGap(62, 62, 62)
                        .addComponent(jLabel52)
                        .addGap(64, 64, 64)
                        .addComponent(jLabel54)
                        .addGap(45, 45, 45)
                        .addComponent(jLabel55)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel26Layout.setVerticalGroup(
            jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel26Layout.createSequentialGroup()
                .addGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49)
                    .addComponent(jLabel52)
                    .addComponent(jLabel54)
                    .addComponent(jLabel55))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Contact Info", jPanel26);

        jPanel28.setBackground(new java.awt.Color(51, 51, 51));

        customerLocation.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        customerLocation.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        customerLocation.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        customerLocation.setDoubleBuffered(true);
        customerLocation.setEnabled(false);
        customerLocation.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                customerLocationCaretUpdate(evt);
            }
        });
        customerLocation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerLocationFocusGained(evt);
            }
        });
        customerLocation.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                customerLocationComponentShown(evt);
            }
        });
        jScrollPane9.setViewportView(customerLocation);

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(255, 255, 255));
        jLabel57.setText("Account");

        jLabel58.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(255, 255, 255));
        jLabel58.setText("Customer Name");

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(255, 255, 255));
        jLabel61.setText("Address");

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addComponent(jScrollPane9)
                        .addContainerGap())
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel57)
                        .addGap(55, 55, 55)
                        .addComponent(jLabel58)
                        .addGap(61, 61, 61)
                        .addComponent(jLabel61)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel28Layout.createSequentialGroup()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel58)
                    .addComponent(jLabel61))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Location", jPanel28);

        jPanel27.setBackground(new java.awt.Color(51, 51, 51));

        customerOutstanding.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        customerOutstanding.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        customerOutstanding.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        customerOutstanding.setDoubleBuffered(true);
        customerOutstanding.setEnabled(false);
        customerOutstanding.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                customerOutstandingCaretUpdate(evt);
            }
        });
        customerOutstanding.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerOutstandingFocusGained(evt);
            }
        });
        customerOutstanding.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                customerOutstandingComponentShown(evt);
            }
        });
        jScrollPane10.setViewportView(customerOutstanding);

        jLabel50.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(255, 255, 255));
        jLabel50.setText("Account");

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(255, 255, 255));
        jLabel59.setText("Customer Name");

        jLabel60.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(255, 255, 255));
        jLabel60.setText("Outstanding");

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel50)
                .addGap(64, 64, 64)
                .addComponent(jLabel59)
                .addGap(83, 83, 83)
                .addComponent(jLabel60)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel27Layout.createSequentialGroup()
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel59)
                    .addComponent(jLabel60))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Outstanding", jPanel27);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.addTab("Customer Database", jPanel7);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));

        logbox.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        logbox.setText(">>> Welcome To the Candy Queen Database...\n>>> Connect to the database to perform tasks...\n");
        logbox.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        logbox.setEnabled(false);
        jScrollPane1.setViewportView(logbox);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jMenu1.setText("Database");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Connect");
        jMenuItem3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Disconnect");
        jMenuItem4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("About");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        Connection conn;
        //Statement exeStmt = null;
        //ResultSet cursor = null;
        Document logs;
        logs = logbox.getDocument();
        try
        {
            Class.forName("org.sqlite.JDBC"); conn = DriverManager.getConnection("jdbc:sqlite:candyq.db"); conn.setAutoCommit(false);
            conn.close();
            logs.insertString(logs.getLength(), "\n>>> Connection Closed.\n", null);
            if ("ONLINE".equals(getStatus.getText()))
            {
                getStatus.setOpaque(true);
                getStatus.setText("OFFLINE");
                getStatus.setBackground(Color.red);
                getStatus.setForeground(Color.white);
                wholesaleStocks.setText("");
                wholesaleSuppliers.setText("");
                wsExpenseDocument.setText("");
                statPanel.setText("");
                dbItemCount.setText("disconnected");
                reOrder.setText("disconnected");
                itemNameBox.removeAllItems();
                itemNameBoxSl.removeAllItems();
                
            }
        }
        catch(ClassNotFoundException | SQLException | BadLocationException e)
        {
            System.err.println( e.getClass().getName() + e.getMessage() );
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        
        //get documents to read and write.
        Document logs = logbox.getDocument();
        Document stock = wholesaleStocks.getDocument();
        Document supplier = wholesaleSuppliers.getDocument();
        Document stats = statPanel.getDocument();
        Document expLog = wsExpenseDocument.getDocument();
        
        String tableName;
        String columnValues;
        String ct;
        String oM;
        String oP;
        String cM;
        String cP;
        String sV;
        String rOrder;
        
        String[] getDate;
        String[] getTime;
        String[] getName;
        String[] getTotal;
        String[] expMemory;
        String[] stockName;
        String[] stockBarcode;
        String[] stockSupplier;
        String[] stockCost;
        
        int[] stockQuantity;
        
        int getExpCount;
        int getDistinctExpCount;

        //initialize Documents and ComboBoxes     
        wholesaleStocks.setText("");
        wholesaleSuppliers.setText("");
        statPanel.setText("");
        wsExpenseDocument.setText("");
        itemNameBox.removeAllItems();
        itemNameBoxSl.removeAllItems();

        try
        {
            //create wholesale table            
            tableName = "inv_ws";
            columnValues = "ITEMNAME VARCHAR UNIQUE, ITEMCODE VARCHAR PRIMARY KEY, SUPPLIER VARCHAR, CASECOSTPRICE VARCHAR, "
                    + "CTNPERCASE INTEGER, CTNCOSTPRICE VARCHAR, CTNSELLINGPRICE VARCHAR, CTNQUANTITY INTEGER, ProfitCount VARCHAR";            
            Table sqlTable = new Table();
            sqlTable.createTable(tableName, columnValues);
            CurrentDate cd = new CurrentDate();
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Wholesale Table Established.\n", null);

            //create retail table            
            tableName = "inv_rt";
            columnValues = "ITEMNAME VARCHAR UNIQUE, ITEMCODE VARCHAR PRIMARY KEY, CTNPRICE VARCHAR, ITEMPRICE VARCHAR, "
                           + "SELLINGPRICE VARCHAR, CTNQUANTITY INTEGER, ITEMQUANTITY INTEGER, ProfitCount VARCHAR";
            sqlTable.createTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Retail Table Established.\n", null);

            //create customer table            
            tableName = "customers";
            columnValues = "AccountNumber VARCHAR PRIMARY KEY, FirstName VARCHAR, LastName VARCHAR, Address VARCHAR, Telephone VARCHAR, "
                        +  "Telephone2 VARCHAR, email VARCHAR, Outstanding VARCHAR";
            sqlTable.createTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Customer Table Established.\n", null);
            
            //create history table        
            tableName = "history";
            columnValues = "Date VARCHAR, Time VARCHAR, Database VARCHAR, Action VARCHAR, Tag VARCHAR";
            sqlTable.createTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> History Table Established.\n", null);
        
            //create stock value table if it does not exist. and insert default values of 0.00 into each column where id=1
            //if stock value table exists, load current values
            tableName = "stock_worth";
            columnValues =  "id INTEGER PRIMARY KEY, WholesaleStockWorth VARCHAR, RetailStockWorth VARCHAR";
            sqlTable.createTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Stock Value Table Established.\n", null); 
            columnValues = "1, 0.00, 0.00";
            sqlTable.initInsertToTable(tableName, columnValues); 
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Stock Value Loaded...\n", null);
            
            //create wholesale expense table
            tableName = "expenses";
            columnValues = "date VARCHAR, time VARCHAR, expense VARCHAR, value VARCHAR";
            sqlTable.createTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Wholesale Expense Table Established.\n",null);
            

            //create retail expense table            
            tableName = "expenses_rt";
            columnValues = "date VARCHAR, time VARCHAR, expense VARCHAR, value VARCHAR";
            sqlTable.createTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Retail Expense Table Established.\n", null);
            

            //create expense history table            
            tableName = "expenditure_history";
            columnValues = "date VARCHAR, time VARCHAR, database VARCHAR, expense VARCHAR, value VARCHAR";
            sqlTable.createTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Expenditure History Table Established.\n", null);
            
        
            //create bank table if it does not exist. and insert default values of 0.00 into each column where id=1 
            //if bank table already exists, load current values  
            tableName = "bank";
            columnValues = "id INTEGER PRIMARY KEY, OverallMoneyEarnedWS VARCHAR, MoneyEarnedWS VARCHAR, OverallProfitEarnedWS VARCHAR, "
                    + "ProfitEarnedWS VARCHAR, OverallMoneyEarnedRT VARCHAR, MoneyEarnedRT VARCHAR, OverallProfitEarnedRT VARCHAR, ProfitEarnedRT VARCHAR";
            sqlTable.createTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Bank Table Established.\n", null);
            columnValues = "1, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00";
            sqlTable.initInsertToTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Bank Data Loaded....\n", null);
            
            //create credentials table if it does not exist.         
            tableName = "history_within_history";
            columnValues = "defuidno_hist INTEGER PRIMARY KEY, defuid_hist VARCHAR UNIQUE, defupw_hist VARCHAR";
            sqlTable.createTable(tableName, columnValues);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> History Link Table Established.\n", null); 
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Tables Successfully Established.\n", null);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(),  "\n"+cd.getDate()+" - "+cd.getTime()+">>> Close The connection when finished to prevent loss of data.\n", null);

            //change status to online            
            getStatus.setOpaque(true);
            getStatus.setText("ONLINE");
            getStatus.setForeground(Color.black);
            getStatus.setBackground(Color.green);
            //call information
            ct = sqlTable.displayItemCount();
            oM = sqlTable.displayOverallMoney();
            oP = sqlTable.displayOverallProfit();
            cM = sqlTable.displayMoney();
            cP = sqlTable.displayProfit();
            sV = sqlTable.displayStockValue();
            rOrder = sqlTable.displayReOrder();
            //enable display and call display values
            sqlTable.enableDisplay();
            stockName = sqlTable.getDisplayName();
            stockBarcode = sqlTable.getDisplayBarcode();
            stockQuantity = sqlTable.getDisplayQuantity();
            stockSupplier = sqlTable.getDisplaySupplier();
            stockCost = sqlTable.getDisplayCartoonCost();
            getDate = sqlTable.getDisplayExpenseDate();
            getTime = sqlTable.getDisplayExpenseTime();
            getName = sqlTable.getDisplayExpenseName();
            getTotal = sqlTable.getDisplayExpenseTotal();
            getExpCount = Integer.parseInt(sqlTable.displayExpenseCount());
            getDistinctExpCount = Integer.parseInt(sqlTable.displayDistinctExpenseCount());
            for (int i = 0; i < getExpCount; i++){
                expLog.insertString(expLog.getLength(), getDate[i]+" - "+getTime[i]+" >>> "+getName[i]+" - "+getTotal[i]+"\n", null);
            }
            //load comboboxes and re-write documents
            for (int i=0; i < Integer.parseInt(ct); i++){
                itemNameBox.addItem(stockName[i]);
                itemNameBoxSl.addItem(stockName[i]);
                stock.insertString(stock.getLength(),stockName[i]+"\t\t\t"+stockBarcode[i]+"\t\t\t"+stockQuantity[i]+"\n", null);
                supplier.insertString(supplier.getLength(), stockName[i]+"\t\t"+stockBarcode[i]+"\t\t"+stockSupplier[i]+"\t\t"+stockCost[i]+"\n", null);
            }
            cd.setDate(); cd.setTime();
            if ("OFFLINE".equals(statPanelStatus.getText())){
                stats.insertString(stats.getLength(), "Use your login credentials to get some helpful database stats.\n", null);
            }
            else{ 
                if ("ONLINE".equals(statPanelStatus.getText())){
                stats.insertString(stats.getLength(), "Overall Money Earned: $"+oM+"\n"+"Overall Profit Earned: $"+oP+"\n"
                        +"Current Money Earned: $"+cM+"\n"+"Current Profit Earned: $"+cP+"\n"
                        +"Stock Value: $"+sV+"\n"
                        +"Last Update: "+cd.getDate()+" - "+cd.getTime(), null);
                }
            }
            dbItemCount.setText(ct);
            reOrder.setText(rOrder);               
        }
        catch (BadLocationException err)
        {
            System.out.println(err);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void getDateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDateTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getDateTimeActionPerformed

    private void getDateTimeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_getDateTimeFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_getDateTimeFocusLost

    private void getDateTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_getDateTimeFocusGained


    }//GEN-LAST:event_getDateTimeFocusGained

    private void getDateTimeMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getDateTimeMouseMoved

    }//GEN-LAST:event_getDateTimeMouseMoved

    private void wsExpenseSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsExpenseSubmitActionPerformed
        // TODO add your handling code here:
        String expName = wsExpense.getText();
        String expMemory = "";
        String date;
        String time;
        String tableName;
        String columnValues;
        String setColumn;
        String toValue;
        String oM;
        String oP;
        String cM;
        String cP;
        String sV;

        String expMemory_[];
        String[] getDate;
        String[] getTime;
        String[] getName;
        String[] getTotal;

        int getExpCount;
        int getDistinctExpCount;

        double expTotal;

        Document expLog = wsExpenseDocument.getDocument();
        Document logs = logbox.getDocument();
        Document stats = statPanel.getDocument();
        wsExpenseDocument.setText("");
        statPanel.setText("");

        Table sqlTable = new Table();
        CurrentDate cd = new CurrentDate();

        if ("ONLINE".equals(getStatus.getText())){
            try{
                if("".equals(expName)){
                    expLog.insertString(expLog.getLength(), "Enter an expense Name\n", null);
                    return;
                }

                expTotal = Double.parseDouble(wsExpenseTotal.getText());
                cd.setDate(); cd.setTime();
                date = cd.getDate();
                time = cd.getTime();
                tableName = "expenses";
                columnValues = "'"+date+"','"+time+"','"+expName+"',"+expTotal+"";
                sqlTable.insertToTable(tableName, columnValues);
                logs.insertString(logs.getLength(), date+" - "+time+">>> "+expName+" recorded.\n", null);
                getExpCount  = Integer.parseInt(sqlTable.displayExpenseCount());
                getDistinctExpCount = Integer.parseInt(sqlTable.displayDistinctExpenseCount());
                sqlTable.enableDisplay();

                getDate = sqlTable.getDisplayExpenseDate();
                getTime = sqlTable.getDisplayExpenseTime();
                getName = sqlTable.getDisplayExpenseName();
                getTotal = sqlTable.getDisplayExpenseTotal();
                for (int i = 0; i < getExpCount; i++){
                    expLog.insertString(expLog.getLength(), getDate[i]+" - "+getTime[i]+" >>> "+getName[i]+" - "+getTotal[i]+"\n", null);
                }
                tableName = "bank";
                setColumn = "ProfitEarnedWS = ";
                toValue = "ProfitEarnedWs - "+expTotal+" WHERE id=1";
                sqlTable.updateTable(tableName, setColumn, toValue);

                setColumn = "MoneyEarnedWs = ";
                toValue = "MoneyEarnedWs - "+expTotal+" WHERE id=1";
                sqlTable.updateTable(tableName, setColumn, toValue);
                oM = sqlTable.displayOverallMoney();
                oP = sqlTable.displayOverallProfit();
                cM = sqlTable.displayMoney();
                cP = sqlTable.displayProfit();
                sV = sqlTable.displayStockValue();
                cd.setDate(); cd.setTime();
                stats.insertString(stats.getLength(), "Overall Money Earned: $"+oM+"\n"+"Overall Profit Earned: $"+oP+"\n"
                    +"Current Money Earned: $"+cM+"\n"+"Current Profit Earned: $"+cP+"\n"
                    +"Stock Value: $"+sV+"\n"
                    +"Last Update: "+cd.getDate()+" - "+cd.getTime() , null);

            }
            catch (BadLocationException ex) {
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                expLog.insertString(expLog.getLength(), "Connect to the database (CTRL + SHIFT + C) in order to record and write expenses.\n", null);
                logs.insertString(logs.getLength(), "Connect to the database (CTRL + SHIFT + C) in order to record and write expenses.\n", null);
            }
            catch (BadLocationException ex) {
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_wsExpenseSubmitActionPerformed

    private void wsExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsExpenseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsExpenseActionPerformed

    private void wholesaleSaleCtnSoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wholesaleSaleCtnSoldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wholesaleSaleCtnSoldActionPerformed

    private void wholesaleSaleSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wholesaleSaleSubmitActionPerformed
        // TODO add your handling code here:

        //in the event of a sale, do this:
        int ctnCount = 0;
        int[] ctnQuantity;

        double stockValue;

        String getProfit = "";
        String sql;
        String CtnSell = "";
        String iName;
        String itemCount;
        String tableName;
        String setColumn;
        String toValue;
        String sellPrice;
        String profitCount;

        String[] itemName;
        String[] barcode;

        //get documents for reading/writing
        Document logs = logbox.getDocument();
        Document stock = wholesaleStocks.getDocument();
        Document stats = statPanel.getDocument();

        CurrentDate cd = new CurrentDate();

        //call table to get sql functionality (user defined class)
        Table sqlTable = new Table();

        //re-initialize statistics page and inventory to empty string
        statPanel.setText("");
        wholesaleStocks.setText("");
        try{
            ctnCount = Integer.parseInt(wholesaleSaleCtnSold.getText()); //cartoons sold
            if (ctnCount <= 0){
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> ctnCount cannot be 0 or less than 0\n", null);
            }
        }
        catch (NumberFormatException | BadLocationException err){
            try{
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> ctnCount Must be represented by a number\n", null); // if (ctnCount != int) { write string to logs };
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try{
            iName = itemNameBoxSl.getSelectedItem().toString();
            tableName = "inv_ws";
            setColumn= "CTNQUANTITY = ";
            toValue="CTNQUANTITY - "+ctnCount+" WHERE ITEMNAME = '"+iName+"'";
            sqlTable.updateTable(tableName, setColumn, toValue);
            cd.setDate(); cd.setTime();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Item '"+iName+"' has been decreased by "+ctnCount+"\n", null);

            sqlTable.enableDisplay();
            itemCount = sqlTable.displayItemCount();
            sqlTable.setCartoonSellPrice(iName);
            sellPrice = sqlTable.getDisplaySellingPrice();
            itemName = sqlTable.getDisplayName();
            barcode = sqlTable.getDisplayBarcode();
            ctnQuantity = sqlTable.getDisplayQuantity();
            stockValue = Double.parseDouble(sellPrice) * ctnCount;

            for (int i = 0; i < Integer.parseInt(itemCount); i++){
                stock.insertString(stock.getLength(), itemName[i]+"\t\t\t"+barcode[i]+"\t\t\t"+ctnQuantity[i]+"\n", null);
            }

            //return here
            sqlTable.setProfitCount(iName);
            profitCount = sqlTable.getDisplayProfitCount();
            double profit = Double.parseDouble(profitCount) * ctnCount;

            tableName = "stock_worth"; setColumn = "WholesaleStockWorth = "; toValue = "WholesaleStockWorth - '"+Double.toString(stockValue)+"' WHERE id=1";
            sqlTable.updateTable(tableName, setColumn, toValue);

            tableName = "bank"; setColumn = "OverallProfitEarnedWS = "; toValue = "OverallProfitEarnedWS + "+profit+" WHERE id=1";
            sqlTable.updateTable(tableName, setColumn, toValue);

            setColumn = "ProfitEarnedWS = "; toValue = "ProfitEarnedWS + "+profit+" WHERE id = 1";
            sqlTable.updateTable(tableName, setColumn, toValue);

            setColumn = "OverallMoneyEarnedWS ="; toValue = "OverallMoneyEarnedWS + '"+Double.toString(stockValue)+"' WHERE id = 1";
            sqlTable.updateTable(tableName, setColumn, toValue);

            setColumn = "MoneyEarnedWS ="; toValue = "MoneyEarnedWS + '"+Double.toString(stockValue)+"' WHERE id = 1";
            sqlTable.updateTable(tableName, setColumn, toValue);
            String oM = sqlTable.displayOverallMoney();
            String oP = sqlTable.displayOverallProfit();
            String cM = sqlTable.displayMoney();
            String cP = sqlTable.displayProfit();
            String sV = sqlTable.displayStockValue();
            String rOrder = sqlTable.displayReOrder();
            cd.setDate(); cd.setTime();
            if ("OFFLINE".equals(statPanelStatus.getText())){
                stats.insertString(stats.getLength(), "Use your login credentials to get some helpful database stats.", null);
            }
            else{
                if ("ONLINE".equals(statPanelStatus.getText())){
                    stats.insertString(stats.getLength(), "Overall Money Earned: $"+oM+"\n"+"Overall Profit Earned: $"+oP+"\n"
                        +"Current Money Earned: $"+cM+"\n"+"Current Profit Earned: $"+cP+"\n"
                        +"Stock Value: $"+sV+"\n"
                        +"Last Update: "+cd.getDate()+" - "+cd.getTime(), null);
                }
            }
            reOrder.setText(rOrder);
        }
        catch (NumberFormatException | BadLocationException err)
        {
            System.out.println(err);
        }
    }//GEN-LAST:event_wholesaleSaleSubmitActionPerformed

    private void itemNameBoxSlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameBoxSlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemNameBoxSlActionPerformed

    private void wholesaleExistingCtnPurchasedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wholesaleExistingCtnPurchasedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wholesaleExistingCtnPurchasedActionPerformed

    private void wholesaleExistingPurchaseSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wholesaleExistingPurchaseSubmitActionPerformed
        // TODO add your handling code here:
        int ctnCount = 0;

        double stockVal;

        String iName;
        String itemCount;
        String tableName;
        String setColumn;
        String toValue;
        String rOrder;
        String oM;
        String oP;
        String cM;
        String cP;
        String sV;
        String gSp;
        String[] itemName;
        String[] barcode;
        String[] costPrice;
        String[] suppl;

        int[] quantity;

        Document logs = logbox.getDocument();
        Document stock = wholesaleStocks.getDocument();
        Document supplier = wholesaleSuppliers.getDocument();
        Document stats = statPanel.getDocument();

        Table sqlTable = new Table();
        CurrentDate cd = new CurrentDate();

        wholesaleStocks.setText("");
        statPanel.setText("");
        wholesaleSuppliers.setText("");

        try{
            ctnCount = Integer.parseInt(wholesaleExistingCtnPurchased.getText());
            if (ctnCount <= 0) {
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> ctnCount cannot be 0 or less than 0\n", null);
                return;
            }
        }
        catch (NumberFormatException | BadLocationException err){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> ctnCount Must be represented by a number\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try{
            iName = itemNameBox.getSelectedItem().toString();
            tableName = "inv_ws";
            setColumn = "CTNQUANTITY = ";
            toValue = "CTNQUANTITY + '"+ctnCount+"' WHERE ITEMNAME = '"+iName+"'";
            sqlTable.updateTable(tableName, setColumn, toValue);

            sqlTable.enableDisplay();
            itemName = sqlTable.getDisplayName();
            barcode = sqlTable.getDisplayBarcode();
            quantity = sqlTable.getDisplayQuantity();
            itemCount = sqlTable.displayItemCount();
            suppl = sqlTable.getDisplaySupplier();
            costPrice = sqlTable.getDisplayCartoonCost();

            for (int i = 0; i < Integer.parseInt(itemCount); i++){
                stock.insertString(stock.getLength(), itemName[i]+"\t\t\t"+barcode[i]+"\t\t\t"+quantity[i]+"\n", null);
                supplier.insertString(supplier.getLength(), itemName[i]+"\t\t"+barcode[i]+"\t\t"+suppl[i]+"\t\t"+costPrice[i]+"\n", null);
            }
            cd.setTime(); cd.setDate();
            logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Item '"+iName+"' has been increased by "+ctnCount+"\n", null);

            oM = sqlTable.displayOverallMoney();
            oP = sqlTable.displayOverallProfit();
            sqlTable.setCartoonSellPrice(iName);
            gSp = sqlTable.getDisplaySellingPrice();
            cM = sqlTable.displayMoney();
            cP = sqlTable.displayProfit();
            rOrder = sqlTable.displayReOrder();
            stockVal = Double.parseDouble(gSp) * ctnCount;

            tableName = "stock_worth";
            setColumn = "WholesaleStockWorth = ";
            toValue="WholesaleStockWorth + "+stockVal+" WHERE id=1";
            sqlTable.updateTable(tableName, setColumn, toValue);
            sV = sqlTable.displayStockValue();
            cd.setTime(); cd.setDate();
            if ("OFFLINE".equals(statPanelStatus.getText())){
                stats.insertString(stats.getLength(), "Use your login credentials to get some helpful database stats.", null);
            }
            else{
                if ("ONLINE".equals(statPanelStatus.getText())){
                    stats.insertString(stats.getLength(), "Overall Money Earned: $"+oM+"\n"+"Overall Profit Earned: $"+oP+"\n"
                        +"Current Money Earned: $"+cM+"\n"+"Current Profit Earned: $"+cP+"\n"
                        +"Stock Value: $"+sV+"\n"
                        +"Last Update: "+cd.getDate()+" - "+cd.getTime(), null);
                }
            }
            reOrder.setText(rOrder);
        }
        catch (NumberFormatException | BadLocationException err)
        {
            System.out.print(err);
        }

        /*wholesaleExistingCtnPurchased.getText();*/
    }//GEN-LAST:event_wholesaleExistingPurchaseSubmitActionPerformed

    private void itemNameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemNameBoxActionPerformed

    private void jPanel20AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jPanel20AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel20AncestorAdded

    private void wsPurchaseCsCtnPerCsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCsCtnPerCsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCsCtnPerCsActionPerformed

    private void wsPurchaseCsTotalCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCsTotalCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCsTotalCostActionPerformed

    private void wsPurchaseCsSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCsSupplierActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCsSupplierActionPerformed

    private void wsPurchaseCsBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCsBarcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCsBarcodeActionPerformed

    private void wsPurchaseCsMarkupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCsMarkupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCsMarkupActionPerformed

    private void wsCsSubmitPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsCsSubmitPurchaseActionPerformed
        // TODO add your handling code here:
        String itemName;
        String itemCount;
        String supplier_;
        String sql;
        String newBarcode = "";
        String setColumn;
        String toValue;
        String sV;
        String oM;
        String oP;
        String cM;
        String cP;
        String rOrder;

        String[] iName;
        String[] bCode;
        String[] Suppl;
        String[] CtnCost;

        Connection conn;
        ResultSet cursor;
        Statement exeStmt = null;

        Table sqlTable = new Table();

        int barcode;
        int casesBought = 0;
        int ctnPerCs = 0;

        int[] quantity;

        double totalCost=0;
        double markup = 0;
        double csCost;
        double ctnCost;
        double ctnSalePrice;

        Document logs = logbox.getDocument();
        Document supplier = wholesaleSuppliers.getDocument();
        Document stock = wholesaleStocks.getDocument();
        Document stats = statPanel.getDocument();

        CurrentDate cd = new CurrentDate();

        statPanel.setText("");
        wholesaleSuppliers.setText("");
        wholesaleStocks.setText("");
        itemNameBox.removeAllItems();
        itemNameBoxSl.removeAllItems();

        try{
            barcode = Integer.parseInt(wsPurchaseCsBarcode.getText());
            if (barcode < 0){
                try {
                    cd.setDate();cd.setTime();
                    logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Barcode cannot be less than 0.\n", null);
                    return;
                }
                catch (BadLocationException ex) {
                    Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            newBarcode = String.format("%013d", barcode);
            wsPurchaseCsBarcode.setText(newBarcode);
        }
        catch (NumberFormatException e){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> The barcode should only consist of numbers.\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        itemName = wsPurchaseCsItemName.getText();
        if (itemName.length() == 0){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Enter an item name to represent the item.\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        supplier_= wsPurchaseCsSupplier.getText();
        if (supplier_.length() == 0){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Enter a supplier name to identify the supplier.\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try{
            totalCost = Double.parseDouble(wsPurchaseCsTotalCost.getText()); totalCost = totalCost * 3;
            if (totalCost <= 0){
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> total cost cannot be 0 or less than 0\n", null);
                return;
            }
        }
        catch (NumberFormatException | BadLocationException ex){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(),"\n"+cd.getDate()+" - "+cd.getTime()+">>> The Total Cost Must be represented by numbers.\n", null);
                return;
            }
            catch (BadLocationException ex1){ Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        try{
            casesBought = Integer.parseInt(wsPurchaseCsCasesBought.getText());

            if (casesBought <= 0){
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(),"\n"+cd.getDate()+" - "+cd.getTime()+">>> The Total Cost Must be represented by numbers.\n", null);
                return;
            }
        }
        catch (NumberFormatException | BadLocationException ex){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> The cases bought should be represented by numbers\n", null);
                return;
            }
            catch (BadLocationException ex1){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        try{
            ctnPerCs = Integer.parseInt(wsPurchaseCsCtnPerCs.getText());
            if (ctnPerCs <= 0){
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> ctn Per Cs cannot be 0 or less than 0.\n", null);
                return;
            }
        }
        catch (NumberFormatException | BadLocationException ex){
            cd.setDate();cd.setTime();
            try{
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> The Ctn Per Cs should be represented by numbers\n", null);
            }
            catch (BadLocationException ex1){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        try{
            markup = Double.parseDouble(wsPurchaseCsMarkup.getText());
            if (markup <= 0){
                cd.setDate(); cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Markup cannot be 0 or less than 0.\n", null);
                return;
            }
        }
        catch (NumberFormatException | BadLocationException ex){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> The Markup should be represented by numbers.\n", null);
                return;
            }
            catch (BadLocationException ex1){ Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        csCost = (totalCost / casesBought);
        ctnCost = (csCost / ctnPerCs);
        ctnSalePrice = (((markup/100) * ctnCost) + ctnCost);
        double profitCount = ((markup / 100) * ctnCost);
        int ctnQuantity = ctnPerCs * casesBought;
        double stockValue = (ctnSalePrice * ctnQuantity);

        BigDecimal cCost = BigDecimal.valueOf(csCost);
        cCost = cCost.setScale(2, BigDecimal.ROUND_HALF_UP);
        BigDecimal ctCost = BigDecimal.valueOf(ctnCost);
        ctCost = ctCost.setScale(2, BigDecimal.ROUND_HALF_UP);
        BigDecimal ctSalePrice = BigDecimal.valueOf(ctnSalePrice);
        ctSalePrice = ctSalePrice.setScale(2, BigDecimal.ROUND_UP);
        BigDecimal pCount = BigDecimal.valueOf(profitCount);
        pCount = pCount.setScale(2, BigDecimal.ROUND_UP);
        BigDecimal sValue = BigDecimal.valueOf(stockValue);
        sValue = sValue.setScale(2, BigDecimal.ROUND_UP);

        if ("ONLINE".equals(getStatus.getText())){
            try{
                String tableName = "inv_ws", columnValues = "'"+itemName+"','"+newBarcode+"','"+supplier_+"','"+cCost.toString()+"',"+ctnPerCs+",'"+
                ctCost.toString()+"','"+ctSalePrice.toString()+"',"+ctnQuantity+",'"+pCount.toString()+"'";
                sqlTable.insertToTable(tableName, columnValues);
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> The " +itemName+ " purchase has been registered to the database under barcode: " +newBarcode+"\n", null);
                sqlTable.enableDisplay();
                itemCount = sqlTable.displayItemCount();
                iName = sqlTable.getDisplayName();
                bCode = sqlTable.getDisplayBarcode();
                Suppl = sqlTable.getDisplaySupplier();
                CtnCost = sqlTable.getDisplayCartoonCost();
                quantity = sqlTable.getDisplayQuantity();
                rOrder = sqlTable.displayReOrder();

                for (int i = 0; i < Integer.parseInt(itemCount); i++){
                    stock.insertString(stock.getLength(), iName[i]+"\t\t\t"+bCode[i]+"\t\t\t"+quantity[i]+"\n", null);
                    supplier.insertString(supplier.getLength(), iName[i]+"\t\t\t"+bCode[i]+"\t\t"+Suppl[i]+"\t\t"+CtnCost[i]+"\n", null);
                    itemNameBox.addItem(iName[i]);
                    itemNameBoxSl.addItem(iName[i]);
                }
                dbItemCount.setText(itemCount);
                reOrder.setText(rOrder);
                //update stock worth
                tableName = "stock_worth"; setColumn = "WholesaleStockWorth = "; toValue = "WholesaleStockWorth + "+sValue.toString()+ " WHERE ID=1";
                sqlTable.updateTable(tableName, setColumn, toValue);
                oM = sqlTable.displayOverallMoney();
                oP = sqlTable.displayOverallProfit();
                cM = sqlTable.displayMoney();
                cP = sqlTable.displayProfit();
                sV = sqlTable.displayStockValue();
                cd.setDate();cd.setTime();
                if ("OFFLINE".equals(statPanelStatus.getText())){
                    stats.insertString(stats.getLength(), "Use your login credentials to get some helpful database stats.", null);
                }
                else{
                    if ("ONLINE".equals(statPanelStatus.getText())){
                        stats.insertString(stats.getLength(), "Overall Money Earned: $"+oM+"\n"+"Overall Profit Earned: $"+oP+"\n"
                            +"Current Money Earned: $"+cM+"\n"+"Current Profit Earned: $"+cP+"\n"
                            +"Stock Value: $"+sV+"\n"
                            +"Last Update: "+cd.getDate()+" - "+cd.getTime(), null);
                    }
                }

            }
            catch (BadLocationException ex) {
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_wsCsSubmitPurchaseActionPerformed

    private void wsPurchaseCsCasesBoughtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCsCasesBoughtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCsCasesBoughtActionPerformed

    private void wsPurchaseCsItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCsItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCsItemNameActionPerformed

    private void wsCsClearObjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsCsClearObjectsActionPerformed
        // TODO add your handling code here:
        wsPurchaseCsBarcode.setText(""); wsPurchaseCsItemName.setText(""); wsPurchaseCsSupplier.setText(""); wsPurchaseCsCtnPerCs.setText(""); wsPurchaseCsCasesBought.setText(""); wsPurchaseCsTotalCost.setText(""); wsPurchaseCsMarkup.setText("");
    }//GEN-LAST:event_wsCsClearObjectsActionPerformed

    private void wsPurchaseCartSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCartSupplierActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCartSupplierActionPerformed

    private void wsPurchaseCartTotalCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCartTotalCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCartTotalCostActionPerformed

    private void wsPurchaseCartItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCartItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCartItemNameActionPerformed

    private void wsPurchaseCartCartBoughtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCartCartBoughtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCartCartBoughtActionPerformed

    private void wsPurchaseCartBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCartBarcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCartBarcodeActionPerformed

    private void wsPurchaseCartMarkupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsPurchaseCartMarkupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wsPurchaseCartMarkupActionPerformed

    private void wsCsClearObjects1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsCsClearObjects1ActionPerformed
        // TODO add your handling code here:
        wsPurchaseCartBarcode.setText("");
        wsPurchaseCartItemName.setText("");
        wsPurchaseCartSupplier.setText("");
        wsPurchaseCartCtnPerCs.setText("");
        wsPurchaseCartCartBought.setText("");
        wsPurchaseCartTotalCost.setText("");
        wsPurchaseCartMarkup.setText("");
    }//GEN-LAST:event_wsCsClearObjects1ActionPerformed

    private void wsCartSubmitPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsCartSubmitPurchaseActionPerformed
        // TODO add your handling code here:

        int barcode;
        int ctnPerCs = 0;
        int ctnBought = 0;

        double totalCost = 0.00;
        double markup = 0.00;

        String newBarcode;
        String itemName;
        String itemCount;
        String supplier_;
        String rOrder;
        String oM;
        String oP;
        String cM;
        String cP;
        String sV;

        String[] stockName;
        String[] stockBarcode;
        String[] stockSupplier;
        String[] stockCost;
        int[] stockQuantity;
        newBarcode = "";

        Document logs = logbox.getDocument();
        Document stock = wholesaleStocks.getDocument();
        Document supplier = wholesaleSuppliers.getDocument();
        Document stats = statPanel.getDocument();

        CurrentDate cd = new CurrentDate();

        wholesaleStocks.setText("");
        wholesaleSuppliers.setText("");
        statPanel.setText("");

        itemNameBox.removeAllItems();
        itemNameBoxSl.removeAllItems();

        Table sqlTable = new Table();

        try{
            barcode = Integer.parseInt(wsPurchaseCartBarcode.getText());
            if (barcode <= 0) {
                cd.setDate(); cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> The barcode cannot be 0 or less than 0.\n", null);
                return;
            }
            newBarcode = String.format("%013d", barcode); wsPurchaseCartBarcode.setText(newBarcode);
        }
        catch (NumberFormatException | BadLocationException e){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> The Barcode should only consist of numbers.\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        itemName = wsPurchaseCartItemName.getText();
        if (itemName.length() == 0){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Enter an item name to represent the item.\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        supplier_ = wsPurchaseCartSupplier.getText();
        if (supplier_.length() == 0){
            try{
                cd.setDate(); cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Enter a supplier name to identify the supplier.\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try{
            ctnPerCs = Integer.parseInt(wsPurchaseCartCtnPerCs.getText());
            if (ctnPerCs <= 0){
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Ctn Per Cs must be a number greater than 0.\n", null);
                return;
            }
        }
        catch (NumberFormatException | BadLocationException e){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Ctn Per Cs must be represented by an integer value.\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try{
            ctnBought = Integer.parseInt(wsPurchaseCartCartBought.getText());
            if (ctnBought <= 0){
                cd.setDate(); cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Ctn Bought should be represented with a number greater than 0.\n", null);
                return;
            }
        }
        catch (NumberFormatException | BadLocationException e){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Ctn Bought cannot be represented by letters.\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try{
            totalCost = Double.parseDouble(wsPurchaseCartTotalCost.getText())*3;
            if (totalCost <= 0){
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Total cost should be represented by a number greater than 0.\n", null);
                return;
            }
        }
        catch (NumberFormatException | BadLocationException e){
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Total cost cannot be represented by letters.\n", null);
                return;
            }
            catch (BadLocationException ex){
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try{
            markup = Double.parseDouble(wsPurchaseCartMarkup.getText());
            if (markup <= 0){
                cd.setDate(); cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Markup should be represented by a number greater than 0.\n", null);
                return;
            }
        }
        catch (NumberFormatException | BadLocationException err){
            try{
                cd.setDate(); cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Markup cannot be represented by letters.\n", null);
                return;
            }
            catch (BadLocationException ex){ Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        double ctnCost =(totalCost / ctnBought), csCost = (ctnCost * ctnPerCs);
        double ctnSalePrice = (((markup/100) * ctnCost) + ctnCost);
        double profitCount = ((markup / 100) * ctnCost);
        double stockValue = (ctnSalePrice * ctnBought);
        BigDecimal ctCost = BigDecimal.valueOf(ctnCost);
        ctCost = ctCost.setScale(2, BigDecimal.ROUND_HALF_UP);
        BigDecimal csCost_ = BigDecimal.valueOf(csCost);
        csCost_ = csCost_.setScale(2, BigDecimal.ROUND_HALF_UP);
        BigDecimal ctSalePrice = BigDecimal.valueOf(ctnSalePrice);
        ctSalePrice = ctSalePrice.setScale(2, BigDecimal.ROUND_UP);
        BigDecimal pCount = BigDecimal.valueOf(profitCount);
        pCount = pCount.setScale(2, BigDecimal.ROUND_UP);
        BigDecimal sValue = BigDecimal.valueOf(stockValue);
        sValue = sValue.setScale(2, BigDecimal.ROUND_UP);

        if ("ONLINE".equals(getStatus.getText())){
            try {
                String tableName = "inv_ws";
                String columnValues = "'"+itemName+"','"+newBarcode+"','"+supplier_+"','"+csCost_.toString()+"','"+ctnPerCs
                +"','"+ctCost.toString()+"','"+ctSalePrice.toString()+"','"+Integer.toString(ctnBought)+"','"+pCount.toString()+"'";
                sqlTable.insertToTable(tableName, columnValues);
                sqlTable.enableDisplay();
                itemCount = sqlTable.displayItemCount();
                stockName = sqlTable.getDisplayName();
                stockBarcode = sqlTable.getDisplayBarcode();
                stockSupplier = sqlTable.getDisplaySupplier();
                stockCost = sqlTable.getDisplayCartoonCost();
                stockQuantity = sqlTable.getDisplayQuantity();
                for (int i=0; i < Integer.parseInt(itemCount); i++){
                    itemNameBox.addItem(stockName[i]);
                    itemNameBoxSl.addItem(stockName[i]);
                    try {
                        stock.insertString(stock.getLength(),stockName[i]+"\t\t\t"+stockBarcode[i]+"\t\t\t"+stockQuantity[i]+"\n",null);
                        supplier.insertString(supplier.getLength(), stockName[i]+"\t\t"+stockBarcode[i]+"\t\t"+stockSupplier[i]+"\t\t"+stockCost[i]+"\n", null);
                    }
                    catch (BadLocationException ex) {
                        Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                //update Stock value
                tableName = "stock_worth"; columnValues = "WholesaleStockWorth = WholesaleStockWorth +";
                sqlTable.updateTable(tableName, columnValues, sValue.toString()+" WHERE id=1");

                oM = sqlTable.displayOverallMoney();
                oP = sqlTable.displayOverallProfit();
                cM = sqlTable.displayMoney();
                cP = sqlTable.displayProfit();
                sV = sqlTable.displayStockValue();
                rOrder = sqlTable.displayReOrder();
                cd.setDate();
                cd.setTime();
                if ("OFFLINE".equals(statPanelStatus.getText())){
                    stats.insertString(stats.getLength(), "Use your login credentials to get some helpful database stats.", null);
                }
                else{
                    if ("ONLINE".equals(statPanelStatus.getText())){
                        stats.insertString(stats.getLength(), "Overall Money Earned: $"+oM+"\n"+"Overall Profit Earned: $"+oP+"\n"
                            +"Current Money Earned: $"+cM+"\n"+"Current Profit Earned: $"+cP+"\n"
                            +"Stock Value: $"+sV+"\n"
                            +"Last Update: "+cd.getDate()+" - "+cd.getTime(), null);
                    }
                }
                reOrder.setText(rOrder);
                dbItemCount.setText(itemCount);

                try {
                    logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> The " +itemName+ " purchase has been registered to the database under barcode: " +newBarcode+"\n", null);
                }
                catch (BadLocationException ex) {
                    Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            catch (BadLocationException ex) {
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try{
                cd.setDate();cd.setTime();
                logs.insertString(logs.getLength(), "\n"+cd.getDate()+" - "+cd.getTime()+">>> Connect to the database in order to perform an action.\n", null);
            }
            catch (BadLocationException ex) {
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_wsCartSubmitPurchaseActionPerformed

    private void jPanel11FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel11FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel11FocusGained

    private void wholesaleStocksComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_wholesaleStocksComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_wholesaleStocksComponentShown

    private void wholesaleStocksFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wholesaleStocksFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_wholesaleStocksFocusGained

    private void wholesaleStocksCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_wholesaleStocksCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_wholesaleStocksCaretUpdate

    private void wholesaleSuppliersComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_wholesaleSuppliersComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_wholesaleSuppliersComponentShown

    private void wholesaleSuppliersFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_wholesaleSuppliersFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_wholesaleSuppliersFocusGained

    private void wholesaleSuppliersCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_wholesaleSuppliersCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_wholesaleSuppliersCaretUpdate

    private void DBLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBLogoutActionPerformed
        // TODO add your handling code here:
        statPanel.setText("");
        statPanelStatus.setText("OFFLINE");
        statPanelStatus.setForeground(Color.WHITE);
        statPanelStatus.setBackground(Color.RED);
        getUsername.setText("");
        getPassword.setText("");
    }//GEN-LAST:event_DBLogoutActionPerformed

    private void getPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getPasswordActionPerformed

    private void DBLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBLoginActionPerformed
        // TODO add your handling code here:
        Table sqlTable;
        String getUsernameText;
        String getPasswordText;
        String getHash;
        String newHash;
        String validateHash;
        String ct;
        String oM;
        String oP;
        String cM;
        String cP;
        String sV;

        Document stats = statPanel.getDocument();
        Document logs = logbox.getDocument();
        LoginForm login = new LoginForm();
        CurrentDate cd = new CurrentDate();
        ResultSet cursor;

        getUsernameText = getUsername.getText();
        getPasswordText = getPassword.getText();
        
        if ("".equals(getUsernameText) || "".equals(getPasswordText)){
            try {
                    String error = "Username and or Password is incorrect. please try again.\n";
                    stats.insertString(stats.getLength(), error, null);
                    logs.insertString(logs.getLength(), error, null);
                }
            catch (BadLocationException ex) {
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
        login.requestPasswordHash(getUsernameText);
        getHash = login.getRequestedPasswordHash();
        statPanel.setText("");

        if ("ONLINE".equals(getStatus.getText())){
            if (BCrypt.checkpw(getPasswordText, getHash)){
                sqlTable = new Table();
                ct = sqlTable.displayItemCount();
                oM = sqlTable.displayOverallMoney();
                oP = sqlTable.displayOverallProfit();
                cM = sqlTable.displayMoney();
                cP = sqlTable.displayProfit();
                sV = sqlTable.displayStockValue();
                cd.setDate(); cd.setTime();
                statPanelStatus.setText("ONLINE");
                statPanelStatus.setBackground(Color.GREEN);
                statPanelStatus.setForeground(Color.BLACK);
                try{
                    stats.insertString(stats.getLength(), "Overall Money Earned: $"+oM+"\n"+"Overall Profit Earned: $"+oP+"\n"
                        +"Current Money Earned: $"+cM+"\n"+"Current Profit Earned: $"+cP+"\n"
                        +"Stock Value: $"+sV+"\n"
                        +"Last Update: "+cd.getDate()+" - "+cd.getTime(), null);
                    newHash = BCrypt.hashpw(getPasswordText, BCrypt.gensalt(12));
                    login.regenNewPassordHash(newHash, getUsernameText);
                }
                catch (BadLocationException ex){
                    Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else{
                try {
                    String error = "Username and or Password is incorrect. please try again.\n";
                    stats.insertString(stats.getLength(), error, null);
                    logs.insertString(logs.getLength(), error, null);
                }
                catch (BadLocationException ex) {
                    Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else{
            String error = "Connect to the database (CTRL + SHIFT + C) in order to login.\n";
            try {
                stats.insertString(stats.getLength(), error, null);
                logs.insertString(logs.getLength(), error, null);
            }
            catch (BadLocationException ex) {
                Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_DBLoginActionPerformed

    private void getUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getUsernameActionPerformed

    private void addrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addrActionPerformed

    private void eMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eMailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eMailActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void phoneOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneOneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneOneActionPerformed

    private void customerContactInfoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_customerContactInfoCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_customerContactInfoCaretUpdate

    private void customerContactInfoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerContactInfoFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_customerContactInfoFocusGained

    private void customerContactInfoComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_customerContactInfoComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_customerContactInfoComponentShown

    private void customerLocationCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_customerLocationCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_customerLocationCaretUpdate

    private void customerLocationFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerLocationFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_customerLocationFocusGained

    private void customerLocationComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_customerLocationComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_customerLocationComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int account;
        String telephoneOne;
        String telephoneTwo;
        String newAccount;
        String firstName;
        String lastName;
        String address;
        String eMailAddress;
        String outstanding;
        String[] validateNumbers;
        String val = null;
        String newTelephoneOne;
        String string = "";
        char[] result;
        
        
        Table sqlTable = new Table();
        
        Document contacts = customerContactInfo.getDocument();
        Document locations = customerLocation.getDocument();
        Document outstandings = customerOutstanding.getDocument();
        Document logs = logbox.getDocument();
        try{
            sqlTable.enableDisplay();
            account = sqlTable.getAccountNumberCount();
            newAccount = String.format("%04d", account);
            accNum.setText(newAccount);
            
            if (Integer.toString(account).length() > 4){
                logs.insertString(logs.getLength(), "\nAccount number must be (0000-9999)\n", null);
                return;
            }
            else{
                logs.insertString(logs.getLength(), "\nAccount Number: Passed\n", null);
            }
            
            firstName = fName.getText();
            if ("".equals(firstName)){
                logs.insertString(logs.getLength(), "\nEnter the customer's first name.\n", null);
                return;
            }
            else{
                logs.insertString(logs.getLength(), "\nFirst Name: Pass.\n", null);
            }
            
            lastName = lName.getText();
            if ("".equals(lastName)){
                logs.insertString(logs.getLength(), "\nEnter the customer's last name.\n", null);
                return;
            }
            else {
                logs.insertString(logs.getLength(), "\nLast Name: Pass.\n", null);
            }
            
            address = addr.getText();
            if ("".equals(address)){
                logs.insertString(logs.getLength(), "\nEnter the customer's address.\n", null);
                return;
            }
            else {
                logs.insertString(logs.getLength(), "\nAddress: Pass.\n", null);
            }

            if ("".equals(phoneOne.getText())){
                phoneOne.setText("000-0000");
            }
            telephoneOne = phoneOne.getText();
            if (!"000-0000".equals(telephoneOne)){
                if (telephoneOne.length() > 7){
                    logs.insertString(logs.getLength(), "\nFirst Telephone Number is too long.\n", null);
                    return; 
                }
                else{ 
                    if (telephoneOne.length() == 7){
                        logs.insertString(logs.getLength(), "\nFirst Telephone Number: Pass.\n", null);
                        
                    }
                    else {
                        logs.insertString(logs.getLength(), "\nFirst Telephone Number is too short.\n", null);
                        return;
                    }
                }
            }
            else {
                if ("000-0000".equals(telephoneOne)){
                    if (telephoneOne.length() > 8){
                        logs.insertString(logs.getLength(), "\nFirst Telephone Number is too long.\n", null);
                        return;
                    }
                    else{ 
                        if (telephoneOne.length() == 7){
                            logs.insertString(logs.getLength(), "\nFirst Telephone Number: Pass.\n", null);
                            telephoneOne = "-";
                            phoneOne.setText("000-0000");
                        }
                        else{
                            if (telephoneOne.length() < 7){
                                logs.insertString(logs.getLength(), "\nFirst Telephone Number is too short.\n", null);
                                return;
                            }
                        }
                    }
                }
            }
            if ("-".equals(phoneTwo.getText())){
                phoneTwo.setText("");
            }
            if ("".equals(phoneTwo.getText())){
                phoneTwo.setText("0000000");
            }
            
            telephoneTwo = phoneTwo.getText();
            if (!"0000000".equals(telephoneTwo)){
                if (telephoneTwo.length() > 7){
                    logs.insertString(logs.getLength(), "\nSecond Telephone Number is too long.\n", null);
                    return; 
                }
                else{ 
                    if (telephoneOne.length() == 7){
                        logs.insertString(logs.getLength(), "\nFirst Telephone Number: Pass.\n", null);
                        validateNumbers = new String[8];
                        for (int i=0; i == 2; i++){
                            validateNumbers[i] =String.valueOf(telephoneOne.charAt(i));
                        }
                        validateNumbers[3] = "-";
                        for (int i=4; i == 8; i++){
                            for (int j = 3; j == 8; j++){
                                validateNumbers[i] = String.valueOf(telephoneOne.charAt(j));
                            }
                        }
                        
                        newTelephoneOne = Arrays.toString(validateNumbers);
                        string = newTelephoneOne.replaceAll("[,]", "");
                        System.out.println(string);
                    }
                    else {
                        logs.insertString(logs.getLength(), "\nSecond Telephone Number is too short.\n", null);
                    }
                }
            }
            else {
                if ("0000000".equals(telephoneTwo)){
                    if (telephoneTwo.length() > 7){
                        logs.insertString(logs.getLength(), "\nSecond Telephone Number is too long.\n", null);
                        return;
                    }
                    else{ 
                        if (telephoneTwo.length() == 7){
                            logs.insertString(logs.getLength(), "\nSecond Telephone Number: Pass.\n", null);
                            telephoneTwo = "-";
                            phoneTwo.setText("-");
                        }
                        else{
                            if (telephoneTwo.length() < 7){                                
                                logs.insertString(logs.getLength(), "\nSecond Telephone Number is too short.\n", null);
                                return;
                            }
                        }
                    }
                }
            }
            
            eMailAddress = eMail.getText();
            if ("".equals(eMailAddress)){
                eMailAddress = "-";
                eMail.setText("-");
                logs.insertString(logs.getLength(), "\nNo Email: Passed.\n", null);
            }
            else{
                logs.insertString(logs.getLength(), "\nEmail: Passed.\n", null);
            }
            
            outstanding = outstnd.getText();
            if ("".equals(outstanding)){
                outstanding = "0.0";
                outstnd.setText("0.0");
            }
            if (0.0 == Double.parseDouble(outstanding)){
                logs.insertString(logs.getLength(), "\nNo Outstanding Balance: Passed.\n", null);
            }
            else{
                logs.insertString(logs.getLength(), "\nOutstanding: Passed.\n", null);
            }
            sqlTable = new Table();
            String columnValues = "'"+newAccount+"','"+firstName+"','"+lastName+"','"+address+"','"+string+"','"+telephoneTwo+"','"+eMailAddress+"','"+outstanding+"'";
            sqlTable.insertToTable("customers", columnValues);
            
        }
        catch (BadLocationException | NumberFormatException ex){
            Logger.getLogger(CandyQDB.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void customerOutstandingCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_customerOutstandingCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_customerOutstandingCaretUpdate

    private void customerOutstandingFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerOutstandingFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_customerOutstandingFocusGained

    private void customerOutstandingComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_customerOutstandingComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_customerOutstandingComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CandyQDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CandyQDB().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DBLogin;
    private javax.swing.JButton DBLogout;
    private javax.swing.JPanel Ncp;
    private javax.swing.JTabbedPane NewCasePurchase;
    private javax.swing.JTextField accNum;
    private javax.swing.JTextField addr;
    private javax.swing.JTextPane customerContactInfo;
    private javax.swing.JTextPane customerLocation;
    private javax.swing.JTextPane customerOutstanding;
    private javax.swing.JLabel dbItemCount;
    private javax.swing.JTextField eMail;
    private javax.swing.JTextField fName;
    protected javax.swing.JTextField getDateTime;
    private javax.swing.JPasswordField getPassword;
    private javax.swing.JLabel getStatus;
    private javax.swing.JTextField getUsername;
    private javax.swing.JComboBox<String> itemNameBox;
    private javax.swing.JComboBox<String> itemNameBoxSl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField lName;
    private javax.swing.JTextPane logbox;
    private javax.swing.JPanel newCsP;
    private javax.swing.JTextField outstnd;
    private javax.swing.JTextField phoneOne;
    private javax.swing.JTextField phoneTwo;
    private javax.swing.JLabel reOrder;
    private javax.swing.JTextArea statPanel;
    private javax.swing.JLabel statPanelStatus;
    private javax.swing.JTextField wholesaleExistingCtnPurchased;
    private javax.swing.JButton wholesaleExistingPurchaseSubmit;
    private javax.swing.JTextField wholesaleSaleCtnSold;
    private javax.swing.JButton wholesaleSaleSubmit;
    private javax.swing.JTextPane wholesaleStocks;
    private javax.swing.JTextPane wholesaleSuppliers;
    private javax.swing.JButton wsCartSubmitPurchase;
    private javax.swing.JButton wsCsClearObjects;
    private javax.swing.JButton wsCsClearObjects1;
    private javax.swing.JButton wsCsSubmitPurchase;
    private javax.swing.JTextField wsExpense;
    private javax.swing.JTextArea wsExpenseDocument;
    private javax.swing.JButton wsExpenseSubmit;
    private javax.swing.JTextField wsExpenseTotal;
    private javax.swing.JTextField wsPurchaseCartBarcode;
    private javax.swing.JTextField wsPurchaseCartCartBought;
    private javax.swing.JTextField wsPurchaseCartCtnPerCs;
    private javax.swing.JTextField wsPurchaseCartItemName;
    private javax.swing.JTextField wsPurchaseCartMarkup;
    private javax.swing.JTextField wsPurchaseCartSupplier;
    private javax.swing.JTextField wsPurchaseCartTotalCost;
    private javax.swing.JTextField wsPurchaseCsBarcode;
    private javax.swing.JTextField wsPurchaseCsCasesBought;
    private javax.swing.JTextField wsPurchaseCsCtnPerCs;
    private javax.swing.JTextField wsPurchaseCsItemName;
    private javax.swing.JTextField wsPurchaseCsMarkup;
    private javax.swing.JTextField wsPurchaseCsSupplier;
    private javax.swing.JTextField wsPurchaseCsTotalCost;
    // End of variables declaration//GEN-END:variables
}

